from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend

# Assuming you have these values already calculated and imported
p = 12364285608729237728935370051724889383766172918562411940137050888520856111495501701626809514131599215905172493259084423879974202877660662973976209879329477
e = 65537
d = 123132904612195074774754861543447148919865414728004805545441241506593911441152886775695492910514259892984244963653082189471743521776372234349139563987419688683246701863325219582701197825401291146131887480811312194218679589237606481471729194501360120512247409704829325883304248487926874024514341503067619876977

q = 11671858755883259065257230945885480358077189284342734139415935865152811440614031622235123452894544307903909611958278659630523654721618051975261913435600387
dmp1 = 9862450134762494949689876021544628491169270114450900202673367292496090362459966842459116135324221136314735145911651392995552610428194589584930349995450321
dmq1 = 3377941392233971263419654536378075071358927768377079183092025200334976800801476078839946694707582310572858898179847587427134933840501237344016245969956399
iqmp = 7922630007737331288485618551825870951878512701134319787269582218519726245657372034623590941889648794927586479659128083682872961156486321567876454714196823

# Generate private key object
private_key = rsa.RSAPrivateNumbers(
    p=p,
    q=q,
    d=d,
    dmp1=dmp1,
    dmq1=dmq1,
    iqmp=iqmp,
    public_numbers=rsa.RSAPublicNumbers(e=e, n=p*q)
).private_key(backend=default_backend())

# Serialize private key to PEM format
pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.TraditionalOpenSSL,
    encryption_algorithm=serialization.NoEncryption()
)

# Write to a file or print it
with open('complete_private_key.pem', 'wb') as f:
    f.write(pem)

print('Complete RSA Private Key written to complete_private_key.pem')
